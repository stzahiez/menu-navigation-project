if { ![project_exists {top_synthesis}] } {
     project_new {top_synthesis}
} else {
     project_open {top_synthesis}
}
set_project_settings -cmp {top_synthesis}
if { ![project_settings_exist -sim top_synthesis] } {
        set_project_settings -sim top_synthesis
}
set_global_assignment -section_id {top_synthesis} -name {EDA_DESIGN_ENTRY_SYNTHESIS_TOOL} {PRECISION SYNTHESIS}
set_global_assignment -name {VQM_FILE} {top_synthesis.vqm}
set_global_assignment -name {USE_TIMEQUEST_TIMING_ANALYZER} {ON}
set_global_assignment -section_id {eda_design_synthesis} -name {EDA_USE_LMF} {mentor.lmf}
set_global_assignment -section_id {eda_design_synthesis} -name {EDA_INPUT_GND_NAME} {GND}
set_global_assignment -section_id {eda_design_synthesis} -name {EDA_INPUT_VCC_NAME} {VCC}
set_global_assignment -section_id {eda_design_synthesis} -name {EDA_SHOW_LMF_MAPPING_MESSAGES} {OFF}
set_global_assignment -section_id {eda_design_synthesis} -name {EDA_RUN_TOOL_AUTOMATICALLY} {OFF}
set_global_assignment -section_id {eda_design_synthesis} -name {EDA_INPUT_DATA_FORMAT} {VQM}
set_global_assignment -section_id {eda_design_synthesis} -name {EDA_OUTPUT_DATA_FORMAT} {VQM}
set_global_assignment -section_id {eda_simulation} -name {EDA_FLATTEN_BUSES} {OFF}
set_global_assignment -section_id {eda_timing_analysis} -name {EDA_FLATTEN_BUSES} {OFF}
set_global_assignment -section_id {eda_design_synthesis} -name {AUTO_SHIFT_REGISTER_RECOGNITION} {OFF}
set_global_assignment -section_id {eda_design_synthesis} -name {AUTO_RAM_RECOGNITION} {OFF}
set_global_assignment -section_id {eda_design_synthesis} -name {AUTO_ROM_RECOGNITION} {OFF}
set_global_assignment -name {BLOCK_RAM_TO_MLAB_CELL_CONVERSION} {OFF}
if { [file exists {top_synthesis_altera.prop}] } {
  source top_synthesis_altera.prop
}
set_global_assignment -name {FAMILY} {CYCLONE II}
set_global_assignment -section_id {top_synthesis} -name {DEVICE} {EP2C35F672C6}
set_global_assignment -name {PROJECT_SHOW_ENTITY_NAME} {OFF}
set_global_assignment -name {SDC_FILE} {top_synthesis_pnr_constraints.sdc}
export_assignment_files
set_global_assignment -section_id {top_synthesis} -name {EDA_RESYNTHESIS_TOOL} {PRECISION PHYSICAL}
export_assignments
set tokens [ split $quartus(version) ]
set build_ver  [lindex $tokens 1]
set build_num  [lindex $tokens 3]
if { ([regexp {\d\.\d\.\d} $build_ver] != 1) && ($build_ver < 4.0) || (($build_ver == 4.0) && ($build_num < 214)) } {
  puts "Error, Precision Physical can be run only with Quartus II Version 4.0 Build 214 and above"
  puts "Info, Installed Quartus II Version is $build_ver Build $build_num"
  exit 1
}
set qfit $::quartus(binpath)/quartus_fit
set qtan $::quartus(binpath)/quartus_tan
set qeda $::quartus(binpath)/quartus_eda
set qsta $::quartus(binpath)/quartus_sta
set qpow $::quartus(binpath)/quartus_pow
set entity_name {top_synthesis}
project_open {top_synthesis}
if { [file exists {top_synthesis_fitter.tcl}] } {
  source top_synthesis_fitter.tcl
}
project_open {top_synthesis}
if { [file exists {top_synthesis_logiclock.tcl}] } {
  source top_synthesis_logiclock.tcl
}
if { [file exists {top_synthesis_placement.tcl}] } {
  source top_synthesis_placement.tcl
}
export_assignments
project_close

project_open {top_synthesis}
package require ::quartus::flow
package require ::quartus::misc
package require ::quartus::report
puts "QUARTUS COMMAND: execute_module -tool map"
if { [ catch { execute_module -tool map } result ] } {
  puts "Error: Execution of quartus_map FAILED: $result"
  exit 1
} else {
  puts "Execution of quartus_map PASSED."
}
puts "QUARTUS COMMAND: execute_module -tool fit"
if { [ catch { execute_module -tool fit } result ] } {
  puts "Error: Execution of quartus_fit FAILED: $result"
  exit 1
} else {
  puts "Execution of quartus_fit PASSED."
}
puts "QUARTUS COMMAND: execute_module -tool sta -args --do_report_timing "
if { [ catch { execute_module -tool sta -args --do_report_timing  } result ] } {
  puts "Error: Execution of quartus_sta FAILED: $result"
  exit 1
} else {
  puts "Execution of quartus_sta PASSED."
}
puts "QUARTUS COMMAND: execute_module -tool asm"
if { [ catch { execute_module -tool asm } result ] } {
  puts "Error: Execution of quartus_asm FAILED: $result"
  exit 1
} else {
  puts "Execution of quartus_asm PASSED."
}

# Write a2m file
load_report
set file_id [open resynthesis/precision/top_synthesis.a2m w]
puts $file_id "#"
puts $file_id "# DO NOT EDIT THIS FILE."
puts $file_id "#"
puts $file_id "\nVER 1.0"
set pname {Fitter||Resource Section||Global & Other Fast Signals}
foreach panel_name [get_report_panel_names] {
  if { [string match "*$pname*" "$panel_name"] } {
    puts $file_id "\nGLOBALS"
    set rows 0
    if { ([regexp {\d\.\d\.\d} $build_ver] != 1) && ($build_ver < 4.1) } {
      set rows [get_number_of_rows $pname]
    } else {
      set rows [get_number_of_rows -name $pname]
    }
    for {set r 0} {$r < $rows} {incr r} {
      set line ""
      if { $r == 0 } {
        append line "HEADER "
      } else {
        append line "DATA "
      }
      append line [get_report_panel_row $pname -row $r]
      regsub -all "\}|\{" $line \" new_line
      puts $file_id $new_line
    }
    puts $file_id "END GLOBALS"
  }
}
close $file_id
unload_report

project_close
